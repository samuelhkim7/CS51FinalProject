(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = sig
    (* the type of environments *)
    type env
	   
    (* the type of values (including closures) stored in
       environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)
   
    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string
                                 
    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = []

    let close (exp : expr) (env : env) : value =
      Closure (exp, env)

    let lookup (env : env) (varname : varid) : value =
      try 
        let ref = List.assoc_opt varname env in
        !(Option.get ref)
      with _ -> raise (EvalError ("(" ^ varname ^ ") not found in environment"))

    let extend (env : env) (varname : varid) (loc : value ref) : env =
      (varname, loc) :: (List.remove_assoc varname env)

    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with 
      | Val n -> exp_to_concrete_string n
      | Closure (n, env) -> if printenvp then (env_to_string env) ^ ":" ^ (exp_to_concrete_string n)
                            else exp_to_concrete_string n

    and env_to_string (env : env) : string =
      match env with 
      | [] -> ""
      | (n, n_val) :: tl -> Printf.sprintf "(%s, %s); %s" 
                            n (value_to_string !n_val) (env_to_string tl)
  end
;;


(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an environment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

let val_to_expr (v : Env.value) : expr =
  match v with
  | Val n -> n
  | _ -> raise (EvalError "val_to_expr: function applied to closure")
;;

let val_to_int (v: Env.value) : int =
  match val_to_expr v with
  | Num n -> n 
  | _ -> raise (EvalError "val_to_int: function applied to non-integer")
;;

let unop_eval (op : unop) (v : Env.value) : Env.value =
  let n = val_to_int v in
  match op with 
  | Negate -> Val (Num (~-n))
;;

let binop_eval (op : binop) (v1: Env.value) (v2: Env.value) : Env.value =
  let x, y = val_to_int v1, val_to_int v2 in
  match op with 
  | Plus -> Env.Val (Num (x + y))
  | Minus -> Env.Val (Num (x - y))
  | Times -> Env.Val (Num (x * y))
  | Equals -> Env.Val (Bool (x = y))
  | LessThan -> Env.Val (Bool (x < y))
;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)
   
let rec eval_s (exp : expr) (_env : Env.env) : Env.value =
  match exp with 
  | Var n -> raise (EvalError ("unbound value" ^ n)) 
  | Num _
  | Bool _ -> Env.Val exp
  | Unop (op, expr1) -> unop_eval op (eval_s expr1 _env)
  | Binop (op, expr1, expr2) -> binop_eval op (eval_s expr1 _env) 
                                (eval_s expr2 _env)
  | Conditional (condition, expr1, expr2) -> if (eval_s condition _env) = 
                                             Env.Val (Bool true)
                                               then (eval_s expr1 _env)
                                             else (eval_s expr2 _env)
  | Fun (_n, _expr1) -> Env.Val exp
  | Let (n, expr1, expr2) -> eval_s (subst n (val_to_expr (eval_s expr1 _env))
                             expr2) _env
  | Letrec (n, expr1, expr2) -> let v = val_to_expr (eval_s expr1 _env) in
                                let repl = subst n (Letrec (n, v, Var(n))) v in
                                eval_s (subst n repl expr2) _env
  | Raise
  | Unassigned -> raise EvalException
  | App (expr1, expr2) -> match eval_s expr1 _env with
                          | Env.Val (Fun (n, body)) -> eval_s (subst n (val_to_expr (eval_s expr2 _env)) body) _env
                          | _ -> raise (EvalError "eval_s unbound function")
;;

let rec eval_helper (is_dynamic: bool) 
                    (exp: expr) (env : Env.env) : Env.value =
  match exp with
  | Var n -> Env.lookup env n
  | Num _
  | Bool _ -> Env.Val exp
  | Unop (op, expr1) -> unop_eval op (eval_helper is_dynamic expr1 env)
  | Binop (op, expr1, expr2) -> 
                              binop_eval op (eval_helper is_dynamic expr1 env) 
                                            (eval_helper is_dynamic expr2 env)
  | Conditional (n, expr1, expr2) -> if (eval_helper is_dynamic n env)
                                     = Env.Val (Bool true)
                                     then (eval_helper is_dynamic expr1 env)
                                     else (eval_helper is_dynamic expr2 env)
  (* For dynamic, just return the fun _exp unchanged, else package together _exp and _env in closure*)
  | Fun (_,_) -> if is_dynamic then Env.Val exp else Env.close exp env
  (* First evaluate definition (expr1) within the current environment. Then extend environment with n set to eval_def *)
  | Let (n, expr1, expr2) -> let eval_def = 
                             ref (eval_helper is_dynamic expr1 env) in
                             eval_helper is_dynamic expr2 
                             (Env.extend env n eval_def)
  | Letrec (n, expr1, expr2) -> let new_loc = ref(Env.Val (Unassigned)) in
                                let new_env = Env.extend env n new_loc in
                                  new_loc := (eval_helper is_dynamic expr1 new_env);
                                eval_helper is_dynamic expr2 new_env
  | Raise
  | Unassigned -> raise EvalException
  | App (expr1, expr2) -> let v1 = eval_helper is_dynamic expr1 env in
                          let v2 = ref (eval_helper is_dynamic expr2 env) in
                          if is_dynamic then
                            match val_to_expr v1 with
                            | Fun (def, bod) -> 
                              (* extending the environment with def set to evaluated expr2, then call helper function on bod and resulting new_env *)
                              let new_env = Env.extend env def v2 in 
                                eval_helper is_dynamic bod new_env
                            | _ -> raise (EvalError "eval_d unbound function")
                          else
                            match v1 with
                            | Closure (Fun (def, bod), lex_env) ->
                              (* same idea but extend environment with def set to evaluated expr2 within the lexical environment then call helper function on bod and resulting new_lex environment*) 
                              let new_lex = Env.extend lex_env def v2 in
                                eval_helper is_dynamic bod new_lex
                            | _ -> raise (EvalError "eval_l unbound function")
;;                            

(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)
   
let eval_d (_exp : expr) (_env : Env.env) : Env.value =
  eval_helper true _exp _env ;;
       
(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)
   
let eval_l (_exp : expr) (_env : Env.env) : Env.value =
  eval_helper false _exp _env ;;

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;
  
(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, `evaluate` is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the `evaluate` function, so it doesn't matter how it's
   set when you submit your solution.) *)
   
let evaluate_s = eval_s ;;
let evaluate_d = eval_d;;
let evaluate_l = eval_l;;
